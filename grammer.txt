prog	  -> (VaDec | FunDec)* EOF

FunDec 	  -> WORD ':' pars '->' VaType '{' St* '}' 
TypeDec   -> 'struct' WORD '{' par ',')* '}'

VaDec	  -> 'let' WORD ':' VaType ';' 

par		  -> WORD ':' VaType
pars 	  -> '(' (par (',' par)*)? ')'

type	  -> 'void' | 'int' | 'long' | 'byte' | 'bool' | 'char' | 'float' | WORD 

VaType    -> type | '->' VaType 
locVarDec -> 'let' WORD ':' VaType |
		  	 'let' WORD ':' VaType '=' BE 

St		  -> BE ('=' | '+=' | '-=' | '*=' | '/-') (BE) ';' |
		     'if' BE St | 'if' BE St 'else' St | 
		     'while' BE St |
		     'return' BE ';' |
		     'print' BE ';' |
			 locVarDec ';'|
		     BLOCK |
			 FunCall
			 

BLOCK	  -> 'begin' (St)* 'end'

BE		  -> BT | BT 'or' BE
BT 		  -> BU | BU 'and' BT
BU		  -> BP | !BU
BP		  -> E | E '>' E | E '<' E | E '>=' E | E '<=' E | E '==' E | E '!=' E 
E		  -> T | T '+' E | T '-' E
T		  -> U | U '*' T | U '/' T | U 'mod' T  
U		  -> POST | '-' U | '->' U | '<-' U
POST	  -> P | P ('[' BE ']' | '.' WORD | '++' | '--')*
P		  -> NUM | WORD | STR | 'none' | '(' BE ')' | 'true' | 'false' 

FunCall   -> WORD '(' (BE (',' BE)*)? ')'

STR		  -> #'"."'
NUM		  -> Di (','Di+)?
WORD	  -> Le {Le|Di|'_'}
Le		  -> #'[A-Za-z]'
Dig		  -> #'[0-9]'
